/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Reply: { // root type
    author?: NexusGenRootTypes['User'] | null; // User
    content?: string | null; // String
    createdAt: string; // String!
    id: string; // ID!
    isLink: boolean; // Boolean!
    parent?: NexusGenRootTypes['Reply'] | null; // Reply
    root?: NexusGenRootTypes['Reply'] | null; // Reply
    title?: string | null; // String
    url?: string | null; // String
    votes: number; // Int!
  }
  User: { // root type
    replies?: NexusGenRootTypes['Reply'] | null; // Reply
  }
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['Reply'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    post: NexusGenRootTypes['Reply']; // Reply!
  }
  Query: { // field return type
    feed: NexusGenRootTypes['Reply'][]; // [Reply!]!
  }
  Reply: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    content: string | null; // String
    createdAt: string; // String!
    id: string; // ID!
    isLink: boolean; // Boolean!
    parent: NexusGenRootTypes['Reply'] | null; // Reply
    root: NexusGenRootTypes['Reply'] | null; // Reply
    title: string | null; // String
    url: string | null; // String
    votes: number; // Int!
  }
  User: { // field return type
    replies: NexusGenRootTypes['Reply'] | null; // Reply
  }
  Node: { // field return type
    id: string; // ID!
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    post: 'Reply'
  }
  Query: { // field return type name
    feed: 'Reply'
  }
  Reply: { // field return type name
    author: 'User'
    content: 'String'
    createdAt: 'String'
    id: 'ID'
    isLink: 'Boolean'
    parent: 'Reply'
    root: 'Reply'
    title: 'String'
    url: 'String'
    votes: 'Int'
  }
  User: { // field return type name
    replies: 'Reply'
  }
  Node: { // field return type name
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    post: { // args
      title: string; // String!
      url: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Node: "Reply"
}

export interface NexusGenTypeInterfaces {
  Reply: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "Node";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}