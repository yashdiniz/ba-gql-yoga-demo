### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Mutation {
  """Post a `Reply` to the feed"""
  post(content: String, title: String!, url: String!): Reply!

  """`Reply` to another reply (nested comment support)"""
  reply(content: String!, parentId: ID!): Reply!

  """Vote on a `Reply`, get current vote count after action."""
  vote(replyId: ID!, type: VoteType!): Int!
}

interface Node {
  """Unique identifier for the resource"""
  id: ID!
}

type Query {
  """Get the feed"""
  feed: [Reply]!

  """Get profile of `User` by name or ID"""
  profile(id: ID, name: String): User!

  "\n                Get nested replies of a root `Link`\n                NOTE: only works for `Link`s, will fail for non-links.\n            "
  replies: [Reply]!
}

type Reply implements Node {
  """Author of the `Reply`"""
  author: User

  """`Reply` content"""
  content: String

  """`Reply` creation time"""
  createdAt: String!

  """`Reply` depth level (used for rendering)"""
  depth: Int!

  """Has the `User` signed in voted on the post already?"""
  hasVoted: Boolean!

  """Unique identifier for the resource"""
  id: ID!

  """Is the `Reply` a link?"""
  isLink: Boolean!

  """Parent of the `Reply`"""
  parent: Reply

  """Root of the `Reply`"""
  root: Reply

  """`Reply` title"""
  title: String

  """`Reply` attached URL"""
  url: String

  """Number of votes on the `Reply`"""
  votes: Int!
}

enum ReplyType {
  ALL
  LINKS
  REPLIES
}

type User implements Node {
  """`User` bio, describing themselves"""
  about: String

  """`User` creation time"""
  createdAt: String

  """Unique identifier for the resource"""
  id: ID!

  """`User` name"""
  name: String

  """Replies by the `User`"""
  replies(type: ReplyType!): [Reply]
}

enum VoteType {
  NO
  UP
}